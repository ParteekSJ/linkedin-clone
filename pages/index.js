import { AnimatePresence } from "framer-motion";
import Head from "next/head";
import { getSession, useSession, signOut } from "next-auth/react";
import Header from "@components/Header";
import Sidebar from "@components/Sidebar";
import { useRouter } from "next/router";
import Feed from "@components/Feed";
import Modal from "@components/Modal";
import { useDispatch, useSelector } from "react-redux";
import { CLOSE_MODAL } from "@features/modalSlice";

import { db } from "@util/firebase";
import { collection, getDocs, orderBy, query } from "firebase/firestore";
import { SET_HANDLE_POST_STATE, SET_USE_SSR_POSTS } from "@features/postSlice";
import Widgets from "@components/Widgets";

// https://next-auth.js.org/getting-started/client

export default function Home({ posts, articles }) {
  const dispatch = useDispatch();
  const { isModalOpen, modalTypeState } = useSelector((state) => ({
    ...state.modal,
  }));

  return (
    <div className="bg-[#F3F2EF] dark:bg-[#131313] dark:text-white h-screen overflow-y-scroll md:space-y-6">
      <Head>
        <title>Feed | LinkedIn</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />

      <main className="flex justify-center gap-x-5 px-4 sm:px-12">
        <div className="flex flex-col md:flex-row gap-5">
          {/* SIDEBAR */}
          <Sidebar />
          {/* FEED */}
          <Feed posts={posts} />
        </div>
        {/* WIDGETS */}
        <Widgets articles={articles} />
        <AnimatePresence>
          {isModalOpen && (
            <Modal
              handleClose={() => dispatch(CLOSE_MODAL())}
              type={modalTypeState}
            />
          )}
        </AnimatePresence>
      </main>
    </div>
  );
}

export async function getServerSideProps(context) {
  // Check if the user is authenticated on the server...
  const session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: "/home",
      },
    };
  }

  /**
   * https://stackoverflow.com/questions/66817759/next-js-error-serializing-res-returned-from-getserversideprops
   */

  // Fetch Posts on SSR
  let posts = [];
  const postsQuery = query(
    collection(db, "posts"),
    orderBy("timestamp", "desc")
  );
  const postsSnapshot = await getDocs(postsQuery);
  postsSnapshot.forEach((doc) => {
    // doc.data() is never undefined for query doc snapshots
    posts.push(doc.data());
  });

  // Get Google News API
  /* https://newsapi.org/docs/endpoints/top-headlines */
  const results = await fetch(
    `https://newsapi.org/v2/top-headlines?country=us&apiKey=${process.env.NEWS_API_KEY}`
  ).then((res) => res.json());

  return {
    props: {
      session,
      posts: JSON.parse(JSON.stringify(posts)),
      articles: results.articles,
    },
  };
}
